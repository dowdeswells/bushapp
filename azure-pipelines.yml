# Node.js with Angular
# Build a Node.js project that uses Angular.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

# specific path build
trigger:
  branches:
    include:
    - master
paths:
    include:
    - ./bushApp/*
    - ./azure-pipelines.yml

variables:
  System.Debug: true

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '10.x'
  displayName: 'Install Node.js'

- script: |
    npm install -g @angular/cli
    npm install
    ng build --prod
  displayName: Install dependencies and build
  workingDirectory: bushApp

- task: CopyFiles@2
  displayName: 'Copy Files'
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)/bushApp/dist'
    TargetFolder: '$(Build.ArtifactStagingDirectory)/bushApp'
    CleanTargetFolder: true

- task: ArchiveFiles@2
  displayName: 'Zip Up bushApp frontend Files'
  inputs:
    rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/bushApp'

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)/bushApp' 
    artifactName: 'bushApp'

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      # Write your commands here
      ls '$(Build.ArtifactStagingDirectory)/bushApp/bushApp'

- task: AzureResourceManagerTemplateDeployment@3
  inputs:
    deploymentScope: 'Resource Group'
    azureResourceManagerConnection: 'bushapp-aus-east'
    subscriptionId: '307e5a26-2005-49e7-8de1-ed32008bf357'
    action: 'Create Or Update Resource Group'
    resourceGroupName: 'bushapp-aus-east'
    location: 'Australia East'
    templateLocation: 'Linked artifact'
    csmFile: '$(Build.SourcesDirectory)/arm/azuredeploy.json'
    csmParametersFile: '$(Build.SourcesDirectory)/arm/azuredeploy.parameters.json'
    deploymentMode: 'Incremental'
    deploymentOutputs: 'armTemplateOutputs'

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: 'env | sort'

- powershell: |
    function Convert-ArmOutputToPsObject {
      param (
        [Parameter(Mandatory=$true)]
        [string]
        $ArmOutputString
      )

      if ($PSBoundParameters['Verbose']) {
        Write-Host "Arm output json is:"
        Write-Host $ArmOutputString
      }

      $armOutputObj = $ArmOutputString | ConvertFrom-Json

      $armOutputObj.PSObject.Properties | ForEach-Object {
          $type = ($_.value.type).ToLower()
          $keyname = "ArmOutputs.$($_.name)"
          $value = $_.value.value

          if ($type -eq "securestring") {
              Write-Host "##vso[task.setvariable variable=$keyname;issecret=true]$value"
              Write-Host "Added Azure DevOps secret variable '$keyname' ('$type')"
          } elseif ($type -eq "string") {
              Write-Host "##vso[task.setvariable variable=$keyname]$value"
              Write-Host "Added Azure DevOps variable '$keyname' ('$type') with value '$value'"
          } else {
              Throw "Type '$type' is not supported for '$keyname'"
          }
      }
    }

    Convert-ArmOutputToPsObject -ArmOutputString '$(armTemplateOutputs)' -Verbose
  displayName: "Parsing outputs from ARM deployment to pipeline variables"

- task: AzureCLI@2
  displayName: Enable Static Website on Blob Storage
  inputs:
    azureSubscription: 'bushapp-aus-east'
    scriptType: 'pscore'
    scriptLocation: inlineScript
    inlineScript: |
      az storage blob service-properties update --account-name '$(ArmOutputs.storage-account-name)' --index-document index.html --static-website true

- task: AzureCLI@2
  displayName: Copy bushApp to blob storage
  inputs:
    azureSubscription: 'bushapp-aus-east'
    scriptType: 'pscore'
    scriptLocation: inlineScript
    inlineScript: |
      az storage blob upload-batch --account-name '$(ArmOutputs.storage-account-name)'  --destination ‘$web’ --source $(Build.SourcesDirectory)/bushApp/dist/bushApp


